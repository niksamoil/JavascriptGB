1. Почему код даёт именно такие результаты?

let a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2  / c = 1+1 ( оператор '++' = '+1', а так как он тут в переди, 
                                               то сначало выполняется он потом +a который равен тоже 1 и того = 2)

d = b++; alert(d);           // 1  / а тут уже срвзу выводиться d = b, 
                                    потому что постфиксная форма возвращает старое (до увеличения/уменьшения числа).

c = (2+ ++a); alert(c);      // 5  / 
d = (2+ b++); alert(d);      // 4
alert(a);                    // 3
alert(b);                    // 3


2. Чему будет равен x в примере ниже?
let a = 2;
let x = 1 + (a *= 2); => x = 1 + (a = a*2) => x = 1 + 4

x = 5

3. Решение в js файле les2.js

7) *Сравнить null и 0. Попробуйте объяснить результат. (приведением типов)

null > 0 false

null == 0 false

null >= 0 true

Нестрогое равенство и сравнения > < >= <= работают по-разному. 
Сравнения преобразуют null в число, рассматривая его как 0. 
Поэтому выражение (3) null >= 0 истинно, а null > 0 ложно.

9. 1 - NaN
2 - 0
3 - undefined
4 - null
5 - ''
6 - -0

10.